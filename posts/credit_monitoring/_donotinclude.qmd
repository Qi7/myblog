---
title: "Monitoring a Credit Business"
author: "Qi Wang"
date: last-modified
categories: ["credit risk", "monitoring"]
format: 
  html:
    mermaid:
      theme: default
execute: 
  echo: false
  warning: false
  error: false
  cache: false
  freeze: auto
toc: true
toc-depth: 3
number-sections: true
---


## Data Generating Process

The first thing when starting analyzing data from one specific domain, is to know the data generating process. That is why we need to have domain knowledge or seek help from subject matter experts. Lending and borrowing are very common activities in daily life and business world. To better understand what kind of data we are going to deal with, I drew a diagram to show a simplified data generating process in @fig-DGP.

![Simplified Data Genrating Process](DGP.svg){width=80% .lightbox .border #fig-DGP}

During application, applicants features like demographic characteristics, socioeconomic characteristics and other relevant data are used to evaluate their creditworthiness. Disqualified applicants will be rejecter. For those accepted applicants, a price (interest rate) and credit line amount will be assigned to them. After becoming a client with credits, they can use the them according to the agreement between the bank and the clients. But most commonly, we observe and record two types of actions, borrowing and paying back.

For those rejected clients, we will never know their counter factual behaviour if they get the credit. They only appear in the data analysis of the application process, maily the rejection rates of the current application strategy, the distributions of the triggered rejected reasons, etc.


## Monitor the Application Process

An overview of the rejection data. The reject process always takes several steps. An applicant might go through several decision engines. In my example, I simulated the data so that it represents a process that the application first goes through the anti-fraud engine, then if passed, they will go through the strategy engine. It can reduce the need to fetch the downstream data for those rejected applicants, hence saving the cost to buy the data. (Yes, data is not free.)

```{r passrate}
library(tidyverse)
library(plotly)
library(lubridate)

# to set color scales
options(
  ggplot2.continuous.colour = "viridis",
  ggplot2.continuous.fill = "viridis"
)

scale_colour_discrete = scale_colour_viridis_d
scale_fill_discrete = scale_fill_viridis_d

# Generate a sequence of year months
start_date <- ym("2023-01")
end_date <- ym("2023-12")
months <- seq.Date(start_date, end_date, by = "1 month")

# Format the sequence as year-month
formatted_months <- format(months, "%Y-%m")

result <- as.factor(c("reject-antifraud", "reject-strategy", "pass"))

generate_probabilities <- function() {
    # Generate random probabilities for a, b, and c
    prob_a <- runif(1)
    prob_b <- runif(1)
    prob_c <- runif(1)

    # Normalize the probabilities to ensure they add up to 1
    total_prob <- prob_a + prob_b + prob_c
    prob_a <- prob_a / total_prob
    prob_b <- prob_b / total_prob
    prob_c <- prob_c / total_prob

    return(sort(c(prob_a, prob_b, prob_c)))
}

# Function to generate a dataframe for each item in the vector
generate_dataframe <- function(item) {
    data_frame <- data.frame(
        month = item,
        result = sample(result, size = sample(10000:50000, 1), replace = TRUE, prob = generate_probabilities())
    )
    return(data_frame)
}

fig <- formatted_months %>%
    map_df(generate_dataframe) %>%
    bind_rows()

fig <- as_tibble(fig)

fig <- fig %>%
    mutate(reject_reasons = map(result, ~ sample(letters[1:20],
        size = sample(1:7, 1),
        prob = c(log(2:11), log(15:6))
    )))

fig <- fig %>% mutate(reject_reasons = ifelse(result == "通过", list(), reject_reasons))
# fig <- ggplot2::diamonds

t_reject_reasons <- fig %>% filter(result != "通过")

fig <- plot_ly(
    x = fig$month,
    color = fig$result,
    type = "histogram", 
    histfunc = "sum",
    colors = "viridis"
) %>%
    layout(
      barmode = "stack"
      , barnorm = "percent"
      , legend = list(orientation = 'h')
      )

fig
```

So when we see the pass rate fluctuate significantly, we may want to zoom in to see the reject reasons for each period.

```{r reject_reasons}
t_reject_reason_count <- t_reject_reasons %>%
    unnest(reject_reasons) %>%
    group_by(month, reject_reasons) %>%
    summarise(n = n())
unique_months <- unique(t_reject_reason_count$month)
max_n <- t_reject_reason_count$n %>% max()
ojs_define(reject_reason = t_reject_reason_count)
ojs_define(unique_months = unique_months)
ojs_define(max_n = max_n)
```

### Monitor the Reject Reasons

```{ojs}
//| echo: false
//| panel: input
viewof select_month = Inputs.select(unique_months, {label: "Select the Month"})
```


::: {.panel-tabset}

#### Visualization

```{ojs}
Plot.plot({
  y: {domain: [0, max_n], 
  label: "trigger times"},
  x: {label: "trigger reasons"},

marks: [
Plot.barY(filtered_data, {x: "reject_reasons", y: "n", fill: "reject_reasons", sort: {x: "y", limit:10, reverse: true}})]
})
```

#### Data
```{ojs}
Inputs.table(filtered_data)
```

:::

```{ojs}
//| echo: false
filtered_data = transpose(reject_reason).filter((d) => d.month === select_month)
```

### Model Score Distribution

Another way to check the quality of the incoming clients is to check the distribution of the model score or some important features. Basically, all scores that asess the clients' credit worthiness are just some way to reduce the dimensionality of the features we can get for that person and map them into a one-dimension scalar number. So we can compare two clients simply by ranking their scores. Assuming we have a model that is effective, we can be alarmed earlier whether there is a significant credit worthiness drift in our client base.


```{r violin_plot}
library(plotly)
library(tidyverse)
library(ggplot2)
library(showtext)
showtext_auto()

# simulate some client data to visualize
balance_age <- 0:19

generate_cohorts <- function(start = "2021-01", end = "2021-12") {
    # Generate a sequence of year months
    start_date <- ym(start)
    end_date <- ym(end)
    months <- seq.Date(start_date, end_date, by = "1 month")

    # Format the sequence as year-month
    cohorts <- format(months, "%Y-%m")
    return(cohorts)
}

cohorts <- generate_cohorts()

# simulate scores for each month
df_score <- cohorts %>%
    map(~ tibble(
        month = .x,
        score = pmax(500, rnorm(1000, mean = sample(600:700, 1), sd = 50))
    )) %>%
    bind_rows()
p_boxplot <- ggplot(data = df_score) +
    geom_boxplot(aes(x = month, y = score, fill = month)) +
    theme_minimal()

ggplotly(p_boxplot)
```

## Monitor Client Behaviour Data

To be continued, I will introduce the main metrics used to assess the health of the credit business, like vintage, rolling rate and so on.

### When to Use the Credit

We give out credit to clients based on their creditworthiness. But not every client is going to use them. We need to monitor the credit utilization rate to see if the business is healthy.

```{r}
data_credit_uti <- cohorts %>%
    map(~ tibble(
        cohort = .x,
        applied_clients = rnorm(1, 100000, 10000),
        utilize_prop = min(rnorm(1, 0.6, 0.1), 1),
        utilize_client = round(utilize_prop * applied_clients)
    )) %>%
    bind_rows()

fig <- plot_ly() %>%
    add_trace(
        data = data_credit_uti
        , x = ~cohort
        , y = ~applied_clients
        , type = "bar"
        , name = "# Clients"
        , hovertemplate = "Approval Month：%{x}<br># Clients: %{y}<extra></extra>"
        , marker = list(color = "#31688e")
    )

ay <- list(
    overlaying = "y",
    side = "right",
    title = "credit utilization rate"
)

fig <- fig %>% add_trace(
    data = data_credit_uti, x = ~cohort, y = ~utilize_prop,
    name = "credit utilization rate", yaxis = "y2"
    , mode = "lines+markers"
    , mode = "lines"
    , type = "scatter",
    hovertemplate = "Approval Month：%{x}<br>util. rate: %{y:.0%}<extra></extra>"
    # , marker = list(color = "#fde725")
)

fig <- fig %>%
    layout(
        title = "",
        yaxis2 = ay,
        xaxis = list(title = ""),
        yaxis = list(title = "Approved Number of Clients")
    ) %>%
    layout(
        xaxis = list(
            zerolinecolor = "#ffff",
            zerolinewidth = 2,
            gridcolor = "ffff"
        ),
        yaxis = list(
            zerolinecolor = "#ffff",
            zerolinewidth = 2,
            gridcolor = "ffff"
        )
    )

fig
```

```{r}
time_to_use <- rchisq(sample(10000:50000, 1), 40) %>% round()

plot_ly(x = time_to_use
, type = "histogram"
, marker = list(color = "#31688e"))
```